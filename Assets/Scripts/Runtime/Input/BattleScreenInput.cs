//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/U.JRPG.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace JRPG.Input
{
    public partial class @BattleScreenInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @BattleScreenInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""U.JRPG"",
    ""maps"": [
        {
            ""name"": ""Battlescreen"",
            ""id"": ""f59c97c0-ce93-4dac-a8c5-073b04e2fc68"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""52257ddd-4255-4dcf-806f-1b1b0bdb9af6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Magic"",
                    ""type"": ""Button"",
                    ""id"": ""20f45735-2aa3-417b-9888-e81a14e3a4ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item"",
                    ""type"": ""Button"",
                    ""id"": ""a6aa2318-fd05-4a34-ba60-ebe783034681"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Etc"",
                    ""type"": ""Button"",
                    ""id"": ""8a99a462-bcbc-4c21-a3c8-8d8d8a6171ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DPadUp"",
                    ""type"": ""Button"",
                    ""id"": ""11891ca4-1bd3-47e4-a916-46bc21f85191"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DPadDown"",
                    ""type"": ""Button"",
                    ""id"": ""f2a9513f-2673-45a1-ba92-13f52eb68db3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DPadLeft"",
                    ""type"": ""Button"",
                    ""id"": ""830e7675-39aa-474d-8e61-5943f63c7a2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DPadRight"",
                    ""type"": ""Button"",
                    ""id"": ""027134c0-fcbf-4d6c-b7ee-aa39877c65c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R1"",
                    ""type"": ""Button"",
                    ""id"": ""d38d0bce-94d3-4a5b-8ffc-8d9463f93146"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R2"",
                    ""type"": ""Button"",
                    ""id"": ""cb883b6e-7e6d-407c-b739-31c571ca945f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""L1"",
                    ""type"": ""Button"",
                    ""id"": ""eaf0f345-a121-45b0-8c63-9f6fc8d4a4d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""L2"",
                    ""type"": ""Button"",
                    ""id"": ""4bcfe25b-b5a9-4bcd-a3d4-614ca8da969c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftStick"",
                    ""type"": ""Value"",
                    ""id"": ""7df0e70b-5a01-4c0d-912b-173ad1fa8c60"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStick"",
                    ""type"": ""Value"",
                    ""id"": ""06202c60-9fe4-44ee-a843-2b1702783dd8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e2b46a5-4a42-4f91-8a2f-976ed8d3fa03"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8adedc5b-aef7-4063-851b-b7e719a2af70"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e218dd1b-4824-47b7-93bb-df9973415e5a"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99b0b170-6f91-45dc-9033-4204d5844bda"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Etc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b0f7948-4a89-4b4b-9e5e-bfa8ddb7d8b9"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DPadUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebe1d0d5-4055-42ac-a629-0eeb6a468969"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""R1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee746352-edaa-4268-a57c-8f59bf4b0869"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""R2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91b06927-72ba-4ca5-9aa8-e49fab921553"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""L1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e012b0c3-997f-49be-98a4-b70ea8aa0210"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""L2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2094b71-178c-47d0-ba2f-3c110766e9fa"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e313c3b1-32b5-4b93-821a-47ad1fd1bab2"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DPadDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77fb4b42-c4ea-48a3-b7e8-7d0cbc0b7225"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DPadLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f3a3cb1-d59e-49b7-960d-702ba3211f40"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DPadRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84f76b66-233a-487e-9830-6e4e7aec9533"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Battlescreen
            m_Battlescreen = asset.FindActionMap("Battlescreen", throwIfNotFound: true);
            m_Battlescreen_Attack = m_Battlescreen.FindAction("Attack", throwIfNotFound: true);
            m_Battlescreen_Magic = m_Battlescreen.FindAction("Magic", throwIfNotFound: true);
            m_Battlescreen_Item = m_Battlescreen.FindAction("Item", throwIfNotFound: true);
            m_Battlescreen_Etc = m_Battlescreen.FindAction("Etc", throwIfNotFound: true);
            m_Battlescreen_DPadUp = m_Battlescreen.FindAction("DPadUp", throwIfNotFound: true);
            m_Battlescreen_DPadDown = m_Battlescreen.FindAction("DPadDown", throwIfNotFound: true);
            m_Battlescreen_DPadLeft = m_Battlescreen.FindAction("DPadLeft", throwIfNotFound: true);
            m_Battlescreen_DPadRight = m_Battlescreen.FindAction("DPadRight", throwIfNotFound: true);
            m_Battlescreen_R1 = m_Battlescreen.FindAction("R1", throwIfNotFound: true);
            m_Battlescreen_R2 = m_Battlescreen.FindAction("R2", throwIfNotFound: true);
            m_Battlescreen_L1 = m_Battlescreen.FindAction("L1", throwIfNotFound: true);
            m_Battlescreen_L2 = m_Battlescreen.FindAction("L2", throwIfNotFound: true);
            m_Battlescreen_LeftStick = m_Battlescreen.FindAction("LeftStick", throwIfNotFound: true);
            m_Battlescreen_RightStick = m_Battlescreen.FindAction("RightStick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Battlescreen
        private readonly InputActionMap m_Battlescreen;
        private IBattlescreenActions m_BattlescreenActionsCallbackInterface;
        private readonly InputAction m_Battlescreen_Attack;
        private readonly InputAction m_Battlescreen_Magic;
        private readonly InputAction m_Battlescreen_Item;
        private readonly InputAction m_Battlescreen_Etc;
        private readonly InputAction m_Battlescreen_DPadUp;
        private readonly InputAction m_Battlescreen_DPadDown;
        private readonly InputAction m_Battlescreen_DPadLeft;
        private readonly InputAction m_Battlescreen_DPadRight;
        private readonly InputAction m_Battlescreen_R1;
        private readonly InputAction m_Battlescreen_R2;
        private readonly InputAction m_Battlescreen_L1;
        private readonly InputAction m_Battlescreen_L2;
        private readonly InputAction m_Battlescreen_LeftStick;
        private readonly InputAction m_Battlescreen_RightStick;
        public struct BattlescreenActions
        {
            private @BattleScreenInput m_Wrapper;
            public BattlescreenActions(@BattleScreenInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Attack => m_Wrapper.m_Battlescreen_Attack;
            public InputAction @Magic => m_Wrapper.m_Battlescreen_Magic;
            public InputAction @Item => m_Wrapper.m_Battlescreen_Item;
            public InputAction @Etc => m_Wrapper.m_Battlescreen_Etc;
            public InputAction @DPadUp => m_Wrapper.m_Battlescreen_DPadUp;
            public InputAction @DPadDown => m_Wrapper.m_Battlescreen_DPadDown;
            public InputAction @DPadLeft => m_Wrapper.m_Battlescreen_DPadLeft;
            public InputAction @DPadRight => m_Wrapper.m_Battlescreen_DPadRight;
            public InputAction @R1 => m_Wrapper.m_Battlescreen_R1;
            public InputAction @R2 => m_Wrapper.m_Battlescreen_R2;
            public InputAction @L1 => m_Wrapper.m_Battlescreen_L1;
            public InputAction @L2 => m_Wrapper.m_Battlescreen_L2;
            public InputAction @LeftStick => m_Wrapper.m_Battlescreen_LeftStick;
            public InputAction @RightStick => m_Wrapper.m_Battlescreen_RightStick;
            public InputActionMap Get() { return m_Wrapper.m_Battlescreen; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BattlescreenActions set) { return set.Get(); }
            public void SetCallbacks(IBattlescreenActions instance)
            {
                if (m_Wrapper.m_BattlescreenActionsCallbackInterface != null)
                {
                    @Attack.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnAttack;
                    @Magic.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnMagic;
                    @Magic.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnMagic;
                    @Magic.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnMagic;
                    @Item.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnItem;
                    @Item.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnItem;
                    @Item.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnItem;
                    @Etc.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnEtc;
                    @Etc.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnEtc;
                    @Etc.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnEtc;
                    @DPadUp.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadUp;
                    @DPadUp.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadUp;
                    @DPadUp.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadUp;
                    @DPadDown.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadDown;
                    @DPadDown.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadDown;
                    @DPadDown.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadDown;
                    @DPadLeft.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadLeft;
                    @DPadLeft.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadLeft;
                    @DPadLeft.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadLeft;
                    @DPadRight.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadRight;
                    @DPadRight.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadRight;
                    @DPadRight.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnDPadRight;
                    @R1.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnR1;
                    @R1.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnR1;
                    @R1.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnR1;
                    @R2.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnR2;
                    @R2.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnR2;
                    @R2.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnR2;
                    @L1.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnL1;
                    @L1.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnL1;
                    @L1.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnL1;
                    @L2.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnL2;
                    @L2.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnL2;
                    @L2.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnL2;
                    @LeftStick.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnLeftStick;
                    @LeftStick.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnLeftStick;
                    @LeftStick.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnLeftStick;
                    @RightStick.started -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnRightStick;
                    @RightStick.performed -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnRightStick;
                    @RightStick.canceled -= m_Wrapper.m_BattlescreenActionsCallbackInterface.OnRightStick;
                }
                m_Wrapper.m_BattlescreenActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @Magic.started += instance.OnMagic;
                    @Magic.performed += instance.OnMagic;
                    @Magic.canceled += instance.OnMagic;
                    @Item.started += instance.OnItem;
                    @Item.performed += instance.OnItem;
                    @Item.canceled += instance.OnItem;
                    @Etc.started += instance.OnEtc;
                    @Etc.performed += instance.OnEtc;
                    @Etc.canceled += instance.OnEtc;
                    @DPadUp.started += instance.OnDPadUp;
                    @DPadUp.performed += instance.OnDPadUp;
                    @DPadUp.canceled += instance.OnDPadUp;
                    @DPadDown.started += instance.OnDPadDown;
                    @DPadDown.performed += instance.OnDPadDown;
                    @DPadDown.canceled += instance.OnDPadDown;
                    @DPadLeft.started += instance.OnDPadLeft;
                    @DPadLeft.performed += instance.OnDPadLeft;
                    @DPadLeft.canceled += instance.OnDPadLeft;
                    @DPadRight.started += instance.OnDPadRight;
                    @DPadRight.performed += instance.OnDPadRight;
                    @DPadRight.canceled += instance.OnDPadRight;
                    @R1.started += instance.OnR1;
                    @R1.performed += instance.OnR1;
                    @R1.canceled += instance.OnR1;
                    @R2.started += instance.OnR2;
                    @R2.performed += instance.OnR2;
                    @R2.canceled += instance.OnR2;
                    @L1.started += instance.OnL1;
                    @L1.performed += instance.OnL1;
                    @L1.canceled += instance.OnL1;
                    @L2.started += instance.OnL2;
                    @L2.performed += instance.OnL2;
                    @L2.canceled += instance.OnL2;
                    @LeftStick.started += instance.OnLeftStick;
                    @LeftStick.performed += instance.OnLeftStick;
                    @LeftStick.canceled += instance.OnLeftStick;
                    @RightStick.started += instance.OnRightStick;
                    @RightStick.performed += instance.OnRightStick;
                    @RightStick.canceled += instance.OnRightStick;
                }
            }
        }
        public BattlescreenActions @Battlescreen => new BattlescreenActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_TouchSchemeIndex = -1;
        public InputControlScheme TouchScheme
        {
            get
            {
                if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
                return asset.controlSchemes[m_TouchSchemeIndex];
            }
        }
        private int m_JoystickSchemeIndex = -1;
        public InputControlScheme JoystickScheme
        {
            get
            {
                if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
                return asset.controlSchemes[m_JoystickSchemeIndex];
            }
        }
        private int m_XRSchemeIndex = -1;
        public InputControlScheme XRScheme
        {
            get
            {
                if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
                return asset.controlSchemes[m_XRSchemeIndex];
            }
        }
        public interface IBattlescreenActions
        {
            void OnAttack(InputAction.CallbackContext context);
            void OnMagic(InputAction.CallbackContext context);
            void OnItem(InputAction.CallbackContext context);
            void OnEtc(InputAction.CallbackContext context);
            void OnDPadUp(InputAction.CallbackContext context);
            void OnDPadDown(InputAction.CallbackContext context);
            void OnDPadLeft(InputAction.CallbackContext context);
            void OnDPadRight(InputAction.CallbackContext context);
            void OnR1(InputAction.CallbackContext context);
            void OnR2(InputAction.CallbackContext context);
            void OnL1(InputAction.CallbackContext context);
            void OnL2(InputAction.CallbackContext context);
            void OnLeftStick(InputAction.CallbackContext context);
            void OnRightStick(InputAction.CallbackContext context);
        }
    }
}
